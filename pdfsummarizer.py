# -*- coding: utf-8 -*-
"""PDFsummarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-1pP7Rq0MO6rwKH59aauBfCxg9zIeZhX
"""

!pip install pdfplumber requests pytesseract pdf2image transformers nltk

import pdfplumber
import pytesseract
from pdf2image import convert_from_path
from transformers import pipeline
import re
import requests
import nltk

# Download necessary NLTK data
nltk.download('punkt')

# Initialize the summarizer pipeline
summarizer = pipeline("summarization")

# Function to download and save the PDF
def download_pdf(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, 'wb') as file:
            file.write(response.content)
        print(f"PDF downloaded successfully and saved as '{filename}'")
    else:
        print("Failed to download the PDF.")

# Function to perform OCR on an image and extract text
def ocr_image(image):
    return pytesseract.image_to_string(image)

# Function to extract text from PDF using pdfplumber and OCR where necessary
def extract_pdf_text(pdf_path):
    text = ''
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages):
            page_text = page.extract_text()

            # If text is empty, use OCR on page image
            if not page_text:
                images = convert_from_path(pdf_path, first_page=page_num + 1, last_page=page_num + 1)
                for img in images:
                    page_text = ocr_image(img)

            text += page_text + "\n" if page_text else ''

    return text

# Function to find all likely chapter titles in the PDF
def find_chapter_titles(full_text):
    titles = re.findall(r'\n([A-Z][A-Za-z0-9\s:,.()\-&]+(?:Chapter|CHAPTER|Section|SECTION)?[A-Za-z0-9\s]*)\n', full_text)
    return [title.strip() for title in titles]

# Function to summarize text using NLP
def generate_summary(text):
    if len(text) < 50:
        return "Content is too short to summarize."
    summary = summarizer(text, max_length=150, min_length=30, do_sample=False)
    return summary[0]['summary_text']

# Function to get chapter text and summarize it
def generate_chapter_summary(chapter_title, full_text):
    pattern = re.compile(rf"{re.escape(chapter_title)}(.*?)(?=\n[A-Za-z0-9\s:,.()\-&]+(?:Chapter|CHAPTER|Section|SECTION)?\n|$)", re.DOTALL)
    match = pattern.search(full_text)

    if match:
        chapter_content = match.group(1).strip()
        return generate_summary(chapter_content)
    else:
        return "Sorry, I couldn't find the chapter you're looking for."

# Main function to start bot and process chapters
def start_bot(pdf_path, url):
    download_pdf(url, pdf_path)

    # Extract text from PDF with OCR assistance
    pdf_text = extract_pdf_text(pdf_path)

    # Detect and display chapter titles
    chapter_titles = find_chapter_titles(pdf_text)
    print("Available chapters:", chapter_titles)

    # Interactive bot loop
    print("Hello! I am the Retrieval Learning Bot. Type the name of a chapter to get a summary. Type 'bye' to end.")

    while True:
        user_input = input("You: ").strip()

        if user_input.lower() == 'bye':
            print("Bot: Goodbye!")
            break

        # Generate summary for the requested chapter
        summary = generate_chapter_summary(user_input, pdf_text)
        print("Bot:", summary)

# Specify the PDF URL and path
pdf_url = 'https://www.iitp.ac.in/~ai-nlp-ml/resources/talks/mlppt.pdf'
pdf_path = 'mlppt.pdf'

# Start the bot
start_bot(pdf_path, pdf_url)

# Install Poppler in Google Colab
!apt-get install -y poppler-utils

!apt-get install -y tesseract-ocr